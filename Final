#!/usr/bin/env python

import collections 
import argparse
import sys
from Bio import SeqIO
import os

#Initialize dictionaries

CodonsDict = collections.OrderedDict([('TTT', 0), ('TTC', 0), ('TTA', 0), ('TTG', 0), ('CTT', 0),
                          ('CTC', 0), ('CTA', 0), ('CTG', 0), ('ATT', 0), ('ATC', 0),
                          ('ATA', 0), ('ATG', 0), ('GTT', 0), ('GTC', 0), ('GTA', 0),
                          ('GTG', 0), ('TAT', 0), ('TAC', 0), ('TAA', 0), ('TAG', 0),
                          ('CAT', 0), ('CAC', 0), ('CAA', 0), ('CAG', 0), ('AAT', 0),
                          ('AAC', 0), ('AAA', 0), ('AAG', 0), ('GAT', 0), ('GAC', 0),
                          ('GAA', 0), ('GAG', 0), ('TCT', 0), ('TCC', 0), ('TCA', 0),
                          ('TCG', 0), ('CCT', 0), ('CCC', 0), ('CCA', 0), ('CCG', 0),
                          ('ACT', 0), ('ACC', 0), ('ACA', 0), ('ACG', 0), ('GCT', 0),
                          ('GCC', 0), ('GCA', 0), ('GCG', 0), ('TGT', 0), ('TGC', 0),
                          ('TGA', 0), ('TGG', 0), ('CGT', 0), ('CGC', 0), ('CGA', 0),
                          ('CGG', 0), ('AGT', 0), ('AGC', 0), ('AGA', 0), ('AGG', 0),
                          ('GGT', 0), ('GGC', 0), ('GGA', 0), ('GGG', 0)])  # initialize w/ acceptable keys
                          
BicodonsDict = collections.OrderedDict()
for first in CodonsDict.keys():
    for second in CodonsDict.key():
        BicodonsDict[first+second] = 0
        
DinucDict = collections.OrderedDict([('AA', 0), ('AT', 0), ('AG', 0), ('AC', 0), 
                                    ('TA', 0), ('TT', 0), ('TG', 0), ('TC', 0), 
                                    ('GA', 0), ('GT', 0), ('GG', 0), ('GC', 0), 
                                    ('CA', 0), ('CT', 0), ('CG', 0), ('CC', 0)])
                                    
JuncDinucDict = collections.OrderedDict([('AA', 0), ('AT', 0), ('AG', 0), ('AC', 0), 
                                    ('TA', 0), ('TT', 0), ('TG', 0), ('TC', 0), 
                                    ('GA', 0), ('GT', 0), ('GG', 0), ('GC', 0), 
                                    ('CA', 0), ('CT', 0), ('CG', 0), ('CC', 0)])                                    

#Functions to calculate dinuc, junc dinuc, codon and bicod frequencies

def calc_dinucs(sequence):
    for i in range(0, len(sequence), 1):
        if i+3>len(sequence):
        break
        temp_str = sequence[i:i+12]
        DinucDict[temp_str] += 1

    return
            
def calc_junc_dinucs(sequence):
    for i in range(0, len(sequence), 3):
        if i+6>len(sequence):
            break
        tmp_str = sequence[i+2:i+4]
        JuncDinucDict[temp_str] += 1

    return
            
def calc_codons(sequence):
    sequence = ""
    for i in range(0, len(sequence), 3):
        if i+3>len(seq):
            break
        temp_str = sequence[i:i+3]
        Codons[temp_str] += 1

    return
            
def calc_bicodons(sequence):
    for i in range(0, len(sequence), 3):
        if i+7>len(sequence):
            break
        temp_str = sequence[i:i+7]
        BicodonsDict[temp_str] += 1
        
        return

def calc_bic(seq):
    for i in range(0, len(seq), 3):
        if i+5>len(sequence):
            break
        temp_str = sequence[i:i+5]
        BicodonsDict[temp_str] += 1
        
        return
    
#Takes each file in folder. Can be just one file. Total usage calculated for each file.

def calculate_codon_usage(folder)
    counter1 = 0
    counter2 = 0
    counter3 = 0

    datfiles = os.listdir('./%s/' % (folder))
    for file in datfiles:
        name = file.split('.')
        filename = name[0]
        print(filename)
        fasta_sequences = SeqIO.parse(open('./%s/' % folder + file), 'fasta')

        for fasta in fasta_sequences:
            i = 0
            name, sequence = fasta.id, str(fasta.seq)
            calc_dinucs(sequence)
            calc_junc_dinucs(sequence)
            calc_codons(sequence)
            calc_bicodons(sequence)
            counter2 += 1
            counter3 += 1
        print(counter2)               
        outfh = open('./%s_dinucs.csv' % (filename), 'w')
        outfh.write("Dinucleotide,Count\n")
        for d in DinucDict.keys():
            outstr = "%s,%s\n" % (d, str(DinucDict[d]))
            outfh.write(outstr)
        outfh.close()

        outfh2 = open('./%s_junc_dinucs.csv' % (filename), "w")
        outfh2.write("Junction Dinucleotide,Count\n")
        for j in JuncDinucDict.keys():
            outstr = "%s,%s\n" % (d, str(JuncDinucDict[j]))
            outfh2.write(outstr)
        outfh2.close()

        outfh3 = open('./%s_codons.csv' % (filename), "w")
        outfh3.write("Codon,Count\n")
        for c in CodonDict.keys():
            outstr = "%s,%s\n" % (c, str(CodonsDict[c]))
            outfh3.write(outstr)
        outfh3.close()

        outfh4 = open('./%s_bicodons.csv' % (filename), "r")
        outfh4.write("Bicodon,Count\n")
        for b in BicodonsDict.keys():
            outstr = "%s,%s\n" % (b, str(BicodonsDict[b]))
            outfh4.write(outstr)
        outfh4.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description = "Folder Selector")
    parser.add_argument("floder", help = "Folder")
    args = parser.parse_args()
    calculate_codon_usage(args.folder)
